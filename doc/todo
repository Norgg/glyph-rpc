done:
    move to wsgi, requests. move to params as constructor; mapper; transient objects; silent server; make_server ssl args; carry over args to werzkeug; form bug; documentation; removed prints; split out into parts; price checker skeleton;
    refactor:
        moved to werkzeug exceptions
        change from Mapper <-> Resources
        to Router <-> Mapper <-> User Objects

    nope: mapper should only take named resources - unnamed ones can be mapped ad-hoc
        rationale: hard to do properly with linking, embedding, etc. 
    done: router should ask resources to urlify themselves?
        mapper now handles this outside router

    worker queue example

    refactoring:
        transientmapper/basemapper - transient mapper handles state transfer
        page/index - split inspection out into different bits.

    ResourceMethod added for safe, inlining
        safe get linked, unsafe get forms, inlines get embed

    after removing index method, use in real world demanded it back
    it's nice - you can now override methods

    renaming done

    query args now encoded too - because it's nice not to have to cast.

    @glyph.redirect()
        a decorator, makes the function do the redirect from return value

    glyph.form(Resource) should work 
        methodargs for class 
        POST to a Resouce.index should redirect to the instance
        glyph.get(url/link/page?, options) etc?
            glyph.url(object) returns the url as a string

    moved stuff around, added docstrings
    moved parsing handling into mapper & resourcemethod
    creating objects different from lookup
    persistent mapping proof of concept
    index creation moved to resourcemethod (noice!)
    throw correct http exceptions, remove bare excepts
    resourcemethod takes another as constructor

remember:
    should handle http mapping by default, verbs, urls and content_type
    should be possible to use objects outside of mapper.
    http ignorant not agnostic (don't need to know http semantics to use it, but can override)

todo:
    documentation:
        under the scenes - request by request
            worked repl example
        glyph encoding clarifcations
            duplicate dict keys,hex parsing
        tutorial
            build a server, use a client
            add methods

        node/extension data types
        cookbook more examples:doing it by hand client/server.
        examples/pricechecker/ add loadbalancers, test caching, sharding version too

        is it rest?
            put vs post essentially -
            yes - hyperlinks, hateoas, caching
            no - non standard mime type, ad-hoc interfaces 

    glyph encoding/ media types:
        glyph.get/fetch supports other media types

        resource handles/parses accept/content-type header

        return xml or json instead of glyph
            @accept(), @content_type()
            extend resourcemthod to override post/get

    in-browser control/debugging:
        jinja2 templates? twitter bootstrap?
        text/html serialization, x-www-url-encoding
        content negociation: html5/json serialization? 
        porting client to javascript/ajax?
            rather than pure html - make a pushstate esque one
        can use werkzeug templates to make html5/bootstrap interface.

    caching 
            @expires ?
            adding caching information to index() ,etc?
            cache control - max age, can store, revalidate?
            etags vs last modified date?
            @cache(max_age, revalidate?)
            def foo(self):
                return date, context

            @foo.if_modified_since()
            def foo_modified(self, date):
                ......

    api:
        persistent mapper: managing objects/deleting them

        glyph.get(url, accept='....') handling different content-types 
            url in page object?
            if unhandledd:
                throw result(content_type, content), decoded if text/*

        handle: return [Resource(), ....]
            callback from router turns resources into links/forms/etc?
            possible: handles unknown types with callback

        new data types: charset handling ? timezones? time periods ?
        refactoring: make it dict driven instead of if-chain driven?

        dependencies: requests should be optional dependency?
        routing: use werkzeug rules inside router

        decorators? ssl only, idempotent (nope cos put etc break)?

        collections:
            like an embed/property, but behaves with the __getitem__ calls ?
            think about interface for pagination/mapping to an infinite scroll, etc.
            inlining - behaves like a link, isn't.
            cursor/resultset behavior?

    snapshoting:
        crawling an api? glyph.crawl(page) returns all links() ?

    api versioning?
        possibly: map default to /v0/ , default takes a version arg? breaks url mapping :v
        possibly: / returns 300 if multiple versions, link header? rel=...

    properties:
        maybe links should be () free and use __get__ instead of call ?
        (~~~ ruby style ~~~)
        make a property() namedtuple for passing around as a url
        perhaps? handle @properties and produce getters and setters (GET/PUT/DELETE)
        dont expose form, expose an embed attribute with put, get, delete methods?
        hard to do properly, what do you to do embed a link, etc ? self.foo calls __get__ ....

    properties of resources:
        things that apply to resources, but are not serialized as the state
        e.g timestamps, versions
        want to be able to say @glyph.version()/if not modified, etc
        on forms, etc?

    transactions?


usecases/testcases
    demos:
        heroku/appengine ?
    atom pub mail server?  mail store? forum queue/broker(herp?)
        use preconditions to do transactional semantics?

    snmp? crawling
    scraper pool ?
        sharding, load balancing, caching, extending
    twitter api - last-modified embedding hack
            use embedded for all new items, links for all client is expected to have already
    examples for a talk?
    db cursors alike for collections ? pagination


ports:
    jquery plugin?
    ruby, js - object style
    cgi/php: create foo.php for each resource, use links.
    0mq transport :v websocket upgrades to get a bi-di socket :v
