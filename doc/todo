done:
    move to wsgi, requests. move to params as constructor
    mapper
    transient objects
    silent server
    make_server ssl args
    carry over args to werzkeug
    form bug
    documentation
    removed prints
    split out into parts
    price checker skeleton

remember:
    should handle http mapping by default, verbs, urls and content_type
    should be possible to use objects outside of mapper.

todo:
    properties:
        handle @properties and produce getters and setters (GET/PUT/DELETE)
        dont expose form, expose an embed attribute with put, get, delete methods?
        
    documentation:
        cookbook more examples 
            changing resources/adding methods/versioning
            doing it by hand 

        make examples/pricechecker/
            client.py - fetch prices from server
            server.py - serve prices
                add caching
                add sharding
            test.py
                add loadbalancers, test caching, sharding version too

    persistent objects:
        extend mapper with pool
        some expire, some don't ?
        split out object to page from Resource.get()
        

    snapshot?

    versioning?
        map default to /v0/ , default takes a version arg
        mapper should only take named resources - unnamed ones can be mapped ad-hoc
        in the url? in a form?



    extending behavior:
        decorators?
            @GET? @POST?  @safe? @expires @idempotent @content_type @accept @ssl_only
            knowing when to link and to form...

        overrides:
            method, content type
            url mapping, query arguments
            @resource <-> @property, allow ovveriding bits of methods?

    http client:
        requests should be optional
        handling different content-types?

    embeds: 
        look at hypermedia afforance list:
            safety, idempotence, mutability, nav/embed

            link ->
                mapped to a function, always get()
            form -> (mutable, navigation, non-idempotent, unsafe)
                mapped to a function with args, always post()

            embed (im/mutable, transclusion, idempotent, safe/unsafe)
                -> mapped to a propertyr - __get__ calls get,
                __set__ calls put, __del__ calls delete

            inlining:
                returning an element within a collection page
        
    collections:
        like an embed/property, but behaves with the __getitem__ calls ?
        inlining - behaves like a link, isn't.

    browser - needs content negociation, can use werkzeug templates to make html5/bootstrap interface.



usecases/testcases
    atom pub 
    mail server?
    mail store? forum
    queue (herp?)
    snmp?
    scraper pool ?
        sharding, load balancing, caching, extending
    twitter api
        last-modified embedding hack
            use embedded for all new items, links for all client is expected to have already
    examples for tmu talk?
        

ideas:
    jquery plugin?

    db cursors alike for collections ? pagination
